// Code generated by MockGen. DO NOT EDIT.
// Source: image_controller.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockImageController is a mock of ImageController interface
type MockImageController struct {
	ctrl     *gomock.Controller
	recorder *MockImageControllerMockRecorder
}

// MockImageControllerMockRecorder is the mock recorder for MockImageController
type MockImageControllerMockRecorder struct {
	mock *MockImageController
}

// NewMockImageController creates a new mock instance
func NewMockImageController(ctrl *gomock.Controller) *MockImageController {
	mock := &MockImageController{ctrl: ctrl}
	mock.recorder = &MockImageControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImageController) EXPECT() *MockImageControllerMockRecorder {
	return m.recorder
}

// Bytes mocks base method
func (m *MockImageController) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockImageControllerMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockImageController)(nil).Bytes))
}

// Convert mocks base method
func (m *MockImageController) Convert(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Convert indicates an expected call of Convert
func (mr *MockImageControllerMockRecorder) Convert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockImageController)(nil).Convert), arg0)
}

// Destroy mocks base method
func (m *MockImageController) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy
func (mr *MockImageControllerMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockImageController)(nil).Destroy))
}

// Format mocks base method
func (m *MockImageController) Format() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format")
	ret0, _ := ret[0].(string)
	return ret0
}

// Format indicates an expected call of Format
func (mr *MockImageControllerMockRecorder) Format() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockImageController)(nil).Format))
}

// MainColor mocks base method
func (m *MockImageController) MainColor() (uint, uint, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MainColor")
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(uint)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// MainColor indicates an expected call of MainColor
func (mr *MockImageControllerMockRecorder) MainColor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MainColor", reflect.TypeOf((*MockImageController)(nil).MainColor))
}

// Resize mocks base method
func (m *MockImageController) Resize(arg0, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resize indicates an expected call of Resize
func (mr *MockImageControllerMockRecorder) Resize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockImageController)(nil).Resize), arg0, arg1)
}

// SetQuality mocks base method
func (m *MockImageController) SetQuality(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQuality", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQuality indicates an expected call of SetQuality
func (mr *MockImageControllerMockRecorder) SetQuality(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQuality", reflect.TypeOf((*MockImageController)(nil).SetQuality), arg0)
}

// StripEXIF mocks base method
func (m *MockImageController) StripEXIF() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StripEXIF")
	ret0, _ := ret[0].(error)
	return ret0
}

// StripEXIF indicates an expected call of StripEXIF
func (mr *MockImageControllerMockRecorder) StripEXIF() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StripEXIF", reflect.TypeOf((*MockImageController)(nil).StripEXIF))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: image_controller.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockimageController is a mock of imageController interface
type MockimageController struct {
	ctrl     *gomock.Controller
	recorder *MockimageControllerMockRecorder
}

// MockimageControllerMockRecorder is the mock recorder for MockimageController
type MockimageControllerMockRecorder struct {
	mock *MockimageController
}

// NewMockimageController creates a new mock instance
func NewMockimageController(ctrl *gomock.Controller) *MockimageController {
	mock := &MockimageController{ctrl: ctrl}
	mock.recorder = &MockimageControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockimageController) EXPECT() *MockimageControllerMockRecorder {
	return m.recorder
}

// Bytes mocks base method
func (m *MockimageController) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockimageControllerMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockimageController)(nil).Bytes))
}

// Convert mocks base method
func (m *MockimageController) Convert(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Convert indicates an expected call of Convert
func (mr *MockimageControllerMockRecorder) Convert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockimageController)(nil).Convert), arg0)
}

// Destroy mocks base method
func (m *MockimageController) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy
func (mr *MockimageControllerMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockimageController)(nil).Destroy))
}

// ExifField mocks base method
func (m *MockimageController) ExifField(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExifField", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExifField indicates an expected call of ExifField
func (mr *MockimageControllerMockRecorder) ExifField(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExifField", reflect.TypeOf((*MockimageController)(nil).ExifField), arg0)
}

// Format mocks base method
func (m *MockimageController) Format() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format")
	ret0, _ := ret[0].(string)
	return ret0
}

// Format indicates an expected call of Format
func (mr *MockimageControllerMockRecorder) Format() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockimageController)(nil).Format))
}

// MainColor mocks base method
func (m *MockimageController) MainColor() (uint, uint, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MainColor")
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(uint)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// MainColor indicates an expected call of MainColor
func (mr *MockimageControllerMockRecorder) MainColor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MainColor", reflect.TypeOf((*MockimageController)(nil).MainColor))
}

// Resize mocks base method
func (m *MockimageController) Resize(arg0, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resize indicates an expected call of Resize
func (mr *MockimageControllerMockRecorder) Resize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockimageController)(nil).Resize), arg0, arg1)
}

// SetQuality mocks base method
func (m *MockimageController) SetQuality(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQuality", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQuality indicates an expected call of SetQuality
func (mr *MockimageControllerMockRecorder) SetQuality(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQuality", reflect.TypeOf((*MockimageController)(nil).SetQuality), arg0)
}

// StripEXIF mocks base method
func (m *MockimageController) StripEXIF() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StripEXIF")
	ret0, _ := ret[0].(error)
	return ret0
}

// StripEXIF indicates an expected call of StripEXIF
func (mr *MockimageControllerMockRecorder) StripEXIF() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StripEXIF", reflect.TypeOf((*MockimageController)(nil).StripEXIF))
}
